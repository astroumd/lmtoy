#! /usr/bin/env bash
#
#    creates the README.html file for a standard RSR "TAP"
#

#            required:   2 arguments
obsnum=$1
   src=$2

echo "<B>Few notes on <A HREF=http://lmtgtm.org/telescope/instrumentation/instruments/rsr/>RSR</A> and the information you see here:</B>"
echo "<OL>"
echo "<LI> 4 chassis represent the two beams and two polarizations; they are normally averaged to increase S/N"
echo "<LI> 6 boards, which if taken in the order 0,2,1,3,5,4 are the bands sorted by increasing frequency (color coded in our plots)"
echo "<LI> each board has 256 channels. For a lag space plot, see lags.png, the waterfall plot is in rsr.wf.pdf"
echo "<LI> a small number of typically 30sec integrations are in each obsnum"
echo "<LI> often multiple obsnums need to be stacked for a full observation. this can cover several days"
echo "<LI> the final spectrum is a single band merged spectrum covering the full 73-111 GHz range, averaged in time and chassis"
echo "<LI> Band edges are at 73.0, 79.7, 86.0, 92.1, 98.6, 104.9, 111.0 GHz, with a small overlap between bands."
echo "<LI> Channel width is 31.25 MHz or about 100 km/s at the 3mm (W) band"
echo "<LI> There is no source doppler tracking, though observations are on a common (helio?)centric frame"
echo "</OL>"
echo ""
echo "Here is a summary of the data products of obsnum=$obsnum"
echo "resulting from running the RSR pipeline."
echo ""

echo "<OL>"

echo "<LI>"

if [ -e badlags.png ]; then
    echo "The badlags plot, by plotting a time sample based RMS for each channel (i.e. lag consistency)."
    echo " RMS above the clip level (max in the plot) will be flagged."
    echo " Boards are color coded by their board (notice band order is 0,2,1,3,5,4)"
    echo "<br><IMG SRC=badlags.png>"
    echo "<br> <A HREF=rsr_badlags.log>seek_bad_channels.py -> rsr3.log</A>"
    echo "Manually edit..."
    echo "             <-> <B>rsr.$obsnum.badlags</B>"    
    echo "<hr>"
else
    echo " In this combined obsnum version we don't re-compute the baglags"
fi


# echo "rsr4.log:  seek_bad_channels.py (Author: P.Schloerb)"
# echo "              -> <A HREF=lags.png>lags.png</A>  (notice band order 0,2,1,3,5,4 is different from bank order)"
# echo "                 but the same colors are used for the same band"



echo "<LI>"
echo "rsr_driver spectrum: (Author: D. Sanchez)"
echo "<br>"
echo "A Waterfall Spectrum: the spectrum for each band, chassis and time sample, color codes by their band:"
echo "<br>"
echo "  We keep an original one with minimal flagging <A HREF=rsr.wf0.pdf>rsr.wf0.pdf</A>"
echo "  and the one that has the latest flags applied:"
echo "              -> <A HREF=rsr.wf.pdf>rsr.wf.pdf</A> "
echo "  in case the pipeline applied badlags and/or has been re-executed."

echo "<br> <A HREF=rsr_driver.log>rsr_driver.log</A>"
echo "<br> <A HREF=rsr.$obsnum.rfile> <B>rsr.$obsnum.rfile</B></A>"
echo "<br>            -> ${src}_rsr_spectrum.txt (final bandmerged spectrum)"


echo "<LI>"
echo "rsr_sum spectrum: (Author: M.Yun)"
echo "<br>with optional blanking"
echo "<br> <A HREF=rsr_sum.log>rsr_sum.log</A>"
echo "<br> <A HREF=rsr.$obsnum.blanking><B>rsr.$obsnum.blanking</B></A>"
echo "<br>         -> rsr.$obsnum.blanking.sum.txt  (final bandmerged spectrum)"




cat $LMTOY/examples/template.svg.html | sed s/template.svg/rsr.spectra.svg/g > rsr.spectra.svg.html
rsync -a $LMTOY/etc/resources .

echo "<LI>"
echo " Here is the two spectra combined in a single plot:"
echo "(or try <A HREF=rsr.spectra.svg.html>rsr.spectra.svg</A>)"
echo "<br><IMG SRC=rsr.spectra.png>"

echo "<br>and a zoomed version in the last band:"
echo "<br><IMG SRC=rsr.spectra_co.png>"
echo "If there is a significant difference between the two, there is some subtle difference in how the scripts work".


adirs=$(ls -d *.admit) || adir=""

echo "<LI>"
echo "A few admit results are also available:"
echo "  <OL>"
for adir in $adirs; do
    echo "<LI> <A HREF=$adir>$adir</A>"
done
echo "  </OL>"
echo "<hr>"
echo "Updated: `date`"

