#! /usr/bin/env bash
#
#    creates the README.html file for a standard RSR "TAP"
#

#            required:   2 arguments
obsnum=$1
   src=$2

echo '<!doctype html><html lang="en"> <head> <meta charset="UTF-8"> <title>Timely Analysis Products (Obsnum=33551)</title> '
echo '<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">'

echo "<div class='container'>"
echo "<center>"
echo "<h1> Timely Analysis Products (Obsnum = $obsnum)</h1>"
echo "</center>"

echo "<div class='row'>"
echo " <div class='col'>"
echo "See <a href=\"#rsrnotes\">below</a> for notes on the <a HREF=\"http://lmtgtm.org/telescope/instrumentation/instruments/rsr/\">Redshift Search Receiver (RSR)</a>"
echo " </div> <!-- col-->"
echo "</div> <!-- row-->"
   
echo "<hr>"
echo "<h2>RSR pipeline data products for obsnum=$obsnum</h2>"
echo "<hr>"

echo "<div class='row'>"
echo " <div class='col'>"
echo "  <div class='card'><div class='card-body'>"
echo "<h4 class='card-title'>System Temperature</h4>"
echo "<img class='card-img-top' alt='System Temperature' src='rsr.tsys.png'>"
echo "  </div> <!-- cardbody -->"
echo "  </div> <!-- card-->"
echo " </div> <!-- col-->"
echo "</div> <!-- row-->"

echo "<div class='row'>"
echo " <div class='col'>"
echo "  <div class='card'><div class='card-body'>"
echo "<h4 class='card-title'>Bad Lags</h4>"
if [ -e badlags.png ]; then
    echo "<a href='badlags.png'><img class='card-img-top' alt='Bad lags' src='badlags.png'></a>"
    echo "<p class='card-text'>The Bad Lags plot shows a time sample based autocorrelation function (ACF) RMS for each channel, board and chassic (i.e. lag consistency)."
    echo "When the RMS is above a clip level (shown as max in the plot), this lag channel will be flagged."
    echo " Boards are color coded by their board (notice band order is 0,2,1,3,5,4)</p>"
    echo "<ul class='list-group list-group-flush'> "
    echo "<li class='list-group-item'> <a href=\"rsr_badlags.log\">Log file of lag flagger</a></li>"
    echo "<li class='list-group-item'> <a href=\"rsr.$obsnum.badlags\">Lag flagging file which can be edited</a></li></ul>"
else
    # we don't compute these again when doing combinations, they use the single obsnum badlags files
    echo "<p class='card-text'> In this combined obsnum version we don't re-compute the baglags</p>"
fi
echo "  </div> <!-- cardbody -->"
echo "  </div><!-- card -->"
echo " </div> <!-- col-->"
echo "</div> <!-- row-->"


echo "<div class='row'>"
echo " <div class='col'>"
echo "  <div class='card'><div class='card-body'>"
echo "<h4 class='card-title'>Waterfall Plot</h4>"
echo "<p class='card-text'> The Waterfall Plot is a spectrum for each band, chassis and time sample, color coded by their band."
echo "We keep two versions: <a href='rsr.wf0.pdf'> the original one with minimal flagging </a> and <a href='rsr.wf.pdf'>one that has the latest flags applied</a> after the pipeline has been re-run. This plot is produced by rsr_drive (Author: D. Sanchez)</p>"

echo "<ul class='list-group list-group-flush'> "
echo "<li class='list-group-item'><a href='rsr_driver.log'>rsr_drive log file</a></li>"
echo "<li class='list-group-item'> <a href=rsr.$obsnum.rfile>rsr_driver $obsnum parameters file (aka rfile)</a></li>"
echo "<li class='list-group-item'><a href='rsr.$obsnum.driver.sum.txt'> ASCII table of final bandmerged spectrum</a></li></ul>"
echo "  </div> <!-- cardbody -->"
echo "  </div><!-- card -->"
echo "  </div><!-- col -->"
echo "</div><!-- row -->"
echo "<div class='row'>"
echo "<div class='col-md'> <a href='rsr.wf-0.png'><img src='rsr.wf-0.png'></a></div>"
echo "<div class='col-md'> <a href='rsr.wf-1.png'><img src='rsr.wf-1.png'></a></div>"
echo "</div><div class='row'>"
echo "<div class='col-md'> <a href='rsr.wf-2.png'><img src='rsr.wf-2.png'></a></div>"
echo "<div class='col-md'> <a href='rsr.wf-3.png'><img src='rsr.wf-3.png'></div></a></div>"
echo "</div><!-- row -->"
#   technically, we should do all rsr.wf-?.png and rsr.wf-?? and rsr.wf-???
#   but this would fill up the page too much, plus one could argue these are already displayed
#   on the individual obsnum page, so could just be skipped here !!!
if [ -e rsr.wf-5.png ]; then
    echo "<div class='row'><div class='col'><p>Skipping remaining plots, see indiviual obsnum pages<p></div></div>"
fi


cat $LMTOY/examples/template.svg.html | sed s/template.svg/rsr.spectra.svg/g > rsr.spectra.svg.html
rsync -a $LMTOY/etc/resources .

echo "<div class='row'><div class='col'>"
echo "<div class='card'><div class='card-body'>"
echo "<h4 class='card-title'>Spectrum from rsr_sum: (Author: M.Yun)</h4>"
echo "<p class='card-text'>The rsr_sum version of the average spectrum has optional blanking and sections to avoid for baseline fitting."
echo "Below are the spectra from rsr_sum (orange) and rsr_driver (blue). If there is a significant difference between the two, then there is some subtle difference in how the scripts work.</p><p class='card-text'>Statistics on individual spectra:"
echo "<pre>"
grep QAC_STATS lmtoy_${obsnum}.log | awk '{printf("%-40s rms=%.3fmK\n",$2,$4*1000)}'
rms=$(grep Integration rsr.$obsnum.driver.sum.txt | awk '{printf("%.3fmK\n",1000*100/sqrt(4*32500000*$4))}')
echo "Expected noise                           rms=$rms for Tsys=100K"
echo "</pre></p>"
echo "  </div> <!-- cardbody -->"
echo "  </div><!-- card -->"
echo "  </div><!-- col -->"
echo "<div class='row'>"
echo "<div class='col-md'> <figure class='figure'><a href='rsr.spectra.png'><img src='rsr.spectra.png'></a><figcaption>The rsr_driver (blue) and rsr_sum (orange) spectra combined in a single plot</figcaption></figure></div>"
echo "<div class='col-md'> <figure class='figure'><a href='rsr.spectra_co.png'><img src='rsr.spectra_co.png'></a><figcaption>Zoomed in version of combined spectral plot [rsr_driver (blue), rsr_sum (orange)].</figcaption></figure></div>"
echo "  </div><!-- col -->"
echo "</div><!-- row -->"
echo "<div class='row'>"
echo " <div class='col'>"
echo "  <div class='card'><div class='card-body'>"
echo "<ul class='list-group list-group-flush'> "
echo "<li class='list-group-item'> <a href='rsr_sum.log'>rsr_sum log file</a></li>"
echo "<li class='list-group-item'><a href='rsr.$obsnum.blanking'>blanking file</a></li>"
echo "<li class='list-group-item'><a href='rsr.$obsnum.blanking.sum.txt'> ASCII table of final bandmerged spectrum</a></li></ul>"
echo "  </div> <!-- cardbody -->"
echo "  </div><!-- card -->"
echo "  </div><!-- col -->"
echo "</div><!-- row -->"
echo "<div class='row'><div class='col'>"
echo "(or try <A HREF=rsr.spectra.svg.html>rsr.spectra.svg</A>)"
echo "  </div><!-- col -->"
echo "</div><!-- row -->"
echo "</div> <!-- container-->"


adirs=$(ls -d *.admit) || adir=""

if [ "$adir" != "" ];then 

    echo "<li>"
    echo "A few ADMIT results are also available:"
    echo "  <ol>"
    for adir in $adirs; do
        echo "<li> <A HREF=$adir>$adir</A></li>"
    done
else
   echo "<li>No ADMIT results available</li>" 
fi
echo "  </ol></li>"
echo "</ol>"
echo "<hr>"
echo '<a name="rsrnotes">'
echo '<h2>Notes on the <a HREF="http://lmtgtm.org/telescope/instrumentation/instruments/rsr/">Redshift Search Receiver (RSR)</a> </h2>'
echo "<ol>"
echo "<li> 4 chassis represent the two beams and two polarizations; they are normally averaged to increase S/N"
echo "</li><li> 6 boards, which if taken in the order 0,2,1,3,5,4 are the bands sorted by increasing frequency (color coded in our plots)"
echo "</li><li> each board has 256 channels. For a lag space plot, see lags.png, the waterfall plot is in rsr.wf.pdf"
echo "</li><li> a small number of typically 30sec integrations are in each obsnum"
echo "</li><li> often multiple obsnums need to be stacked for a full observation. this can cover several days"
echo "</li><li> the final spectrum is a single band merged spectrum covering the full 73-111 GHz range, averaged in time and chassis"
echo "</li><li> Band edges are at 73.0, 79.7, 86.0, 92.1, 98.6, 104.9, 111.0 GHz, with a small overlap between bands."
echo "</li><li> Board ranges: {0: [(71.72, 79.69)], 1: [(85.41, 93.38)], 2: [(78.02, 85.99)], 3: [(90.62, 98.58)], 4: [(104.31, 112.28)], 5: [(96.92, 104.88)]}"
echo "</li><li> Channel width is 31.25 MHz or about 100 km/s in the 3mm (W) band"
echo "</li><li> There is no source doppler tracking, though observations are on a common (helio?)centric frame"
echo "</li></ol>"
echo "<hr>"
echo "Updated: `date`"

