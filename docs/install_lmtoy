#! /bin/bash
#
#    this is an example how the LMTOY environment can be installed
#    Takes about 2 mins (on a good internet connection)
#    and 4.5 GB of diskspace - all of this with pipeline=0
#    With pipeline=1 this will be 7.5 mins and 9.1 GB
#
#    28-dec-2020:     LMTSLR installed (more to come)
#     4-jan-2021:     try to be smart on finding LMT data; disable montage for now
#    12-feb-2021:     lmt_data -> data_lmt
#    23-feb-2021:     new options (venv, nemo)
#    11-may-2021:     use only $DATA_LMT, no more IRC_data
#    22-jul-2021:     better bootstrap on missing DATA_LMT
#     2-dec-2021:     add admit, use embedded DATA_LMT and WORK_LMT if none else given
#     9-nov-2022:     various overhaul for Unity to allow "mknemo builds for pgplot, cfitsio
#

version=9-nov-2022

#--HELP
#   Keywords for installation
#
lmtoy=lmtoy                       # root directory name where to install (probably should not change it) [use . for itself]
branch=master                     # branch
wget=wget                         # use wgetc if you have PJT's caching version
venv=0                            # set to 1 if you want to bypass a new anaconda3 and use venv
nemo=1                            # set to 0 if you don't need NEMO (not recommended) or use existing $NEMO
pgplot=1                          # set to 1 if you want PGPLOT in NEMO, instead of simple PS driver, use 2 for self-built
mknemo=0                          # use mknemo builds for pgplot, hdf5, netcdf4, cfitsio
data_lmt=${DATA_LMT:-data_lmt}    # give sensible default for $DATA_LMT   lma:/lma1/lmt/data_lmt/
work_lmt=${WORK_LMT:-work_lmt}    # give sensible default for $WORK_LMT
bench=0                           # set to the tar.gz file for bootstrapping IRC benchmark data; 0 skips
admit=1                           # install ADMIT ?
pipeline=1                        # full pipeline run on bench files?  If selected, bench=1 is not needed
docs=0                            # make docs? (produces the html tree)
debug=0                           # shell in debug mode? (set -x)


# Usage examples:
#   install_lmtoy                                             # typical ubuntu with pre-conditions, full test w/ admit
#   install_lmtoy  mknemo=1 pgplot=2 wget=wgetc admit=0       # unity with no modules loaded, all self-contained
#                  data_lmt=/nese/toltec/dataprod_lmtslr/data_lmt     # or add the big $DATA_LMT on unity
#
#--HELP

if [ -z "$1" ] || [ "$1" == "--help" ] || [ "$1" == "-h" ];then
    set +x
    awk 'BEGIN{s=0} {if ($1=="#--HELP") s=1-s;  else if(s) print $0; }' $0
    exit 0
fi

#             simple keyword=value command line parser for bash - don't make any changing below
for arg in "$@"; do
  export "$arg"
done

#             put in bash debug mode
if [ $debug = 1 ]; then
    set -x
fi

# Announce
echo LMTOY install script version $version

if [ -z $LMTOY ]; then
    echo "Warning, installing a new LMTOY in $lmtoy, removing the old one, if present"
    sleep 5
else
    echo "Warning, you have (an old?) LMTOY=$LMTOY loaded, this could be dangerous. Continuing at your own risk"
    sleep 5
fi


if [ $lmtoy == "." ]; then
    if [ ! -e lmtoy_start.sh.in ]; then
	echo "You are not in the LMTOY root directory: $(pwd)"
	exit 1
    fi
    lmtoy=$(pwd)
else
    rm -rf $lmtoy
    git clone https://github.com/astroumd/lmtoy $lmtoy    
fi

cd $lmtoy
git checkout $branch

#  symlinks where we allow them; this checks if we want to inherit an existing NEMO
if [ -e $nemo/nemo_start.sh ]; then
    ln -s $nemo nemo
fi

#  get everything we need from github
make git

if [ $venv = 0 ]; then
  make install_python WGET=$wget
  source python_start.sh
  make pip
  make install_lmtslr
  make install_dreampy3
  make install_dvpipe
else
  make pip
  make install_lmtslr_venv
  make install_dreampy3_venv
  make install_dvpipe_venv  
fi

# install_nemo.sh opt=1 mknemos=cfitsio,hdf5,netcdf4 yapp=pglocal
if [ $nemo = 1 ]; then
    if [ $mknemo = 1 ]; then
	make install_mknemos MKNEMOS="cfitsio hdf5 netcdf4"
    fi
    if [ $pgplot = 1 ] ; then
	make install_nemo YAPP=pgplot
    elif [ $pgplot = 2 ]; then
	make install_mknemos MKNEMOS="pgplot"
	make install_nemo_pglocal
    else
	make install_nemo
    fi
fi

if [ $admit = 1 ]; then
    # for now, also install casa. sorry, linux only folks
    git clone -b python3 https://github.com/astroumd/admit
    pushd admit
    wget -O - https://casa.nrao.edu/download/distro/casa/release/el7/casa-release-5.8.0-109.el7.tar.gz | tar zxf -
    ln -s casa-release-5.8.0-109.el7 casa
    autoconf
    ./configure --with-casa-root=`pwd`/casa
    popd
fi


./configure --with-data=$(realpath $data_lmt) --with-work=$(realpath $work_lmt)

#  activate LMTOY and run benchmark, but unless you made preparations
#  on finding the data, the benchmark will not run here.

source lmtoy_start.sh
which python
python --version

if [ $docs = 1 ]; then
    (cd docs; pip3 install -r requirements.txt; make nbs lastmod html)
fi

pip3 freeze > freeze.log


# this bench will be deprecation, as it is not using the official pipeline
if [ $bench != 0 ]; then
    bench=$(realpath $bench)
    
    mkdir -p $DATA_LMT
    (cd $DATA_LMT; tar zxf $bench)

    cd $LMTOY/examples

    # SLR bench
    echo Assuming your $DATA_LMT has the IRC data
    if [ -d $DATA_LMT/ifproc ]; then
	lmtinfo.py 79448 
	make bench
    else
	echo Could not find the SLR data. Hope your DATA_LMT=$DATA_LMT is good:
	ls -l $DATA_LMT
    fi

    # RSR bench
    if [ -d $DATA_LMT/rsr ]; then     
	make rsr1
    else
	echo Could not find the RSR data. Hope your DATA_LMT=$DATA_LMT is good:
	ls -l $DATA_LMT
	echo Attempting to download the RSR cal files
	(cd $DATA_LMT; make -f $LMTOY/data_lmt/Makefile rsr)
    fi
fi

# full pipeline bench for RSR and SEQ (if you pick this, the bench=1 is really not needed anymore)
if [ $pipeline = 1 ]; then
    (cd $DATA_LMT; make -f $LMTOY/data_lmt/Makefile data)
    cd $WORK_LMT
    SLpipeline.sh obsnum=33551 restart=1 admit=$admit
    echo "QAC_STATS: rsr.33551.driver.sum.txt 2.36888e-05 0.000943648 -0.00407884 0.0459238  0 0.157781  1185 [expected]"
    echo "QAC_STATS: rsr.33551.blanking.sum.txt 4.19332e-05 0.000950482 -0.00385069 0.0459053  0 0.188981  1186 [expected]"
    SLpipeline.sh obsnum=79448 restart=1 admit=$admit
    echo "QAC_STATS: IRC+10216_79448.ccd 0.0142744 2.21014 -563.449 634.86  0 0.0531463 [expected]"
    echo "QAC_STATS: - 0.0242549 0.33463 -2.42886 15.3425  0 0.123691 [expected]"
    echo xdg-open  $WORK_LMT/2014ARSRCommissioning/33551/README.html
    echo xdg-open  $WORK_LMT/2018S1SEQUOIACommissioning/79448/README.html
fi
